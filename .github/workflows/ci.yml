name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"] # Just test the version you actually use

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Create .env file
        run: |
          cp .env.example .env

      - name: Run linting
        run: |
          chmod +x ./lint.sh
          ./lint.sh

      - name: Run tests
        run: |
          chmod +x ./test.sh
          ./test.sh

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install safety
        run: pip install safety

      - name: Run security check
        run: safety check -r requirements.txt

  docker:
    runs-on: ubuntu-latest
    needs: [test, security] # Wait for both test and security to pass
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and test Docker image
        run: |
          docker build -t ip-geolocation-service:latest .
          docker run -d --name test-container -p 8080:8080 ip-geolocation-service:latest
          sleep 15
          curl -f http://localhost:8080/ || exit 1
          curl -f http://localhost:8080/v1/stats || exit 1
          docker stop test-container
          docker rm test-container
